const ToutiaoCDN = 'TT';
const XiGuaCDN = 'XG';
const HuoshanCDN = 'HS';
const WuKongCDN = 'WK';
const DouYinCDN = 'DY';
const FlipgramCDN = 'FG';
const TuchongCDN = 'TC';
const NeiHanCDN = 'NH';
const OtherCDN = 'TT'; // use Toutiao

const ALL = [ToutiaoCDN, XiGuaCDN, HuoshanCDN, WuKongCDN, DouYinCDN, FlipgramCDN, TuchongCDN, NeiHanCDN, OtherCDN];

const SF_CDNS = {
  [ToutiaoCDN]: ['sf1-ttcdn-tos.pstatp.com', 'sf3-ttcdn-tos.pstatp.com', 'sf6-ttcdn-tos.pstatp.com'],
  [XiGuaCDN]: ['sf1-xgcdn-tos.pstatp.com', 'sf3-xgcdn-tos.pstatp.com', 'sf6-xgcdn-tos.pstatp.com'],
  [HuoshanCDN]: ['sf1-hscdn-tos.pstatp.com', 'sf3-hscdn-tos.pstatp.com', 'sf6-hscdn-tos.pstatp.com'],
  [WuKongCDN]: ['sf1-wkcdn-tos.pstatp.com', 'sf3-wkcdn-tos.pstatp.com', 'sf6-wkcdn-tos.pstatp.com'],
  [DouYinCDN]: ['sf1-dycdn-tos.pstatp.com', 'sf3-dycdn-tos.pstatp.com', 'sf6-dycdn-tos.pstatp.com'],
  [FlipgramCDN]: ['sf1-fgcdn-tos.pstatp.com', 'sf3-fgcdn-tos.pstatp.com', 'sf6-fgcdn-tos.pstatp.com'],
  [TuchongCDN]: ['sf1-tccdn-tos.pstatp.com', 'sf3-tccdn-tos.pstatp.com', 'sf6-tccdn-tos.pstatp.com'],
  [NeiHanCDN]: ['sf1-nhcdn-tos.pstatp.com', 'sf3-nhcdn-tos.pstatp.com', 'sf6-nhcdn-tos.pstatp.com'],
};

const LF_CDNS = {
  [ToutiaoCDN]: ['lf1-ttcdn-tos.pstatp.com', 'lf3-ttcdn-tos.pstatp.com', 'lf6-ttcdn-tos.pstatp.com'],
  [XiGuaCDN]: ['lf1-xgcdn-tos.pstatp.com', 'lf3-xgcdn-tos.pstatp.com', 'lf6-xgcdn-tos.pstatp.com'],
  [HuoshanCDN]: ['lf1-hscdn-tos.pstatp.com', 'lf3-hscdn-tos.pstatp.com', 'lf6-hscdn-tos.pstatp.com'],
  [WuKongCDN]: ['lf1-wkcdn-tos.pstatp.com', 'lf3-wkcdn-tos.pstatp.com', 'lf6-wkcdn-tos.pstatp.com'],
  [DouYinCDN]: ['lf1-dycdn-tos.pstatp.com', 'lf3-dycdn-tos.pstatp.com', 'lf6-dycdn-tos.pstatp.com'],
  [FlipgramCDN]: ['lf1-fgcdn-tos.pstatp.com', 'lf3-fgcdn-tos.pstatp.com', 'lf6-fgcdn-tos.pstatp.com'],
  [TuchongCDN]: ['lf1-tccdn-tos.pstatp.com', 'lf3-tccdn-tos.pstatp.com', 'lf6-tccdn-tos.pstatp.com'],
  [NeiHanCDN]: ['lf1-nhcdn-tos.pstatp.com', 'lf3-nhcdn-tos.pstatp.com', 'lf6-nhcdn-tos.pstatp.com'],
};

function _hashcode(str) {
  let hash = 0, i = 0, len = str.length;
  while (i < len) {
    hash = ((hash << 5)) - hash + str.charCodeAt(i++) << 0;
  }
  return hash >= 0 ? hash : -hash;
}
/**
 * 使用说明：
 *  1. product 用于确定请求上下文的业务，以便作 CDN 财务审计，从而选择不同的域名
 *  2. getDomains 接口会根据 product / bucket / key 返回一组域名，按顺序用作 fallback 使用
 *  3. 访问路径为 http[s]?://{DOMAIN／(obj|img)／{BUCKET}/{KEY}
 *
 * @param product
 * @param bucket
 * @param key
 */
function getDomains(product, bucket, key) {
  if (ALL.indexOf(product) === -1) {
    throw 'product error';
  }
  const hash = _hashcode(`${bucket}/${key}`);
  const nodes = SF_CDNS[product];
  const len = nodes.length;
  const m = hash % len;
  let ret = [];
  if (m + 3 <= len) {
    ret = nodes.slice(m, m + 3);
  } else {
    ret = nodes.slice(m, len);
    ret = ret.concat(nodes.slice(0, 3 + m - len));
  }
  return ret;
}

/**
 * 同 getDomains 相关较大的文件专用域名（平均 20M 以上）
 *
 * @param product
 * @param bucket
 * @param key
 */
function getDomainsLargefile(product, bucket, key) {
  if (ALL.indexOf(product) === -1) {
    throw 'product error';
  }
  const hash = _hashcode(`${bucket}/${key}`);
  const nodes = LF_CDNS[product];
  const len = nodes.length;
  const m = hash % len;
  let ret = [];
  if (m + 3 <= len) {
    ret = nodes.slice(m, m + 3);
  } else {
    ret = nodes.slice(m, len);
    ret = ret.concat(nodes.slice(0, 3 + m - len));
  }
  return ret;
}

module.exports = { getDomains, getDomainsLargefile };